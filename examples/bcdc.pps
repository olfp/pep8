;
; four digit bcd calculator
;

TTY=    0                       ; TTY is device zero

SAR=    CLL RAR                 ; shift ac right
NEG=	CLL CMA IAC		; negate ac
RMO=	CLL CLA CMA		; Recall minus one aka 777

	MACRO	RLI		; recall immediate
	ZMEM	APTR%% \1
	RCL	APTR%%
	ENDM

	MACRO	INC		; increment word
	RCL	\1
	IAC
	STO	\1
	ENDM

	MACRO	DEC		; decremtn word
	RCL	\1
	DAC
	STO	\1
	ENDM

	MACRO	CPI		; compare with immediate
	ZMEM	CPTR%% \1
	NEG
	TAD	CPTR%%
	ENDM

	MACRO	TAI		; TAD immediate
	ZMEM	ADIP%% \1
	TAD	ADIP%%
	ENDM

	MACRO	ANI		; AND immediate
	ZMEM	ANIP%% \1
	AND	ANIP%%
	ENDM

	MACRO	CMP		; subtract to check 0/</>
	NEG
	TAD	\1
	ENDM

	MACRO	BUS		; negate AC and add: inv sub
	NEG
	TAD	\1
	ENDM

	MACRO	BNE		; branch if not zero/equal
	SZA
	JMP	\1
	ENDM

	MACRO	BEQ		; branch if zero/equal
	SNA
	JMP	\1
	ENDM

	MACRO	BGE		; branch if greater/equal
	SMA
	JMP	\1
	ENDM

	MACRO	BLT		; branch if less than
	SPA
	JMP	\1
	ENDM

	MACRO	BLE		; branch if less/equal
	SPA SNA
	JMP	\1
	ENDM

	MACRO	BGT		; branch if greater
	SMA SZA
	JMP	\1
	ENDM

	MACRO	JPL		; jmp long 
	ZMEM	JVEC%% \1
	JMP I	JVEC%%
	ENDM

	MACRO	JSL		; jmp sub long
	ZMEM	CVEC%% \1
	JMS I	CVEC%%
	ENDM

BOOT:	JPL	START           ; jumpstart (just in case)

DBUF:	0
	0
	0
DEND:	0			; display reg, four words

SBUF:	0
	0
	0
SEND:	0			; second reg, four words

OPCHAR: 0			; char from op to perform

BCDCRY: 0

DSPSIZ: (DEND-DBUF+1)
DIGFRE:	0

CURCH:	0			; current char

ZMODE:	0			; zero for leading zeros
DPTR:	0			; poitner in disp reg
DPTR2:	0

EOF:    121                     ; Q, quit
NL:     12                      ; ^J, new line
CR:     15                      ; ^M, carriage retuen
SPACE:  40                      ; ' '
CHAR0:  60                      ; 0
CHAR9:  71                      ; 9
CHARP:	53			; plus '+'
CHARM:	55			; minus '-'
CHARC:	103			; C for clear
ERRVAL:	25			; 'E' - '0' for Error

GETCH:  NOP                     ; get char from tty
WAITI:  SRI     TTY
        JMP     WAITI
        DGA     TTY             ; read char
        JMP I   GETCH

PUTCH:  NOP                     ; print char on tty
WAITO:  SRO     TTY
        JMP     WAITO
        DPA     TTY             ; print char
        JMP I   PUTCH

PUTDIG:	NOP
	CLL
	TAD	CHAR0
	JMS	PUTCH
	JMP I	PUTDIG

TERPRI: NOP                     ; print cr-lf
        RCL     CR              
        JMS     PUTCH
        RCL     NL
        JMS     PUTCH
        JMP I   TERPRI

	PAGE

BANNER: NOP
        JMS     TERPRI
        JSL	PUTS
        TEXT    /BCD CALC/
        JMS     TERPRI
        JMP I   BANNER

START:  JMS     BANNER          ; print startup banner
	RCL	DSPSIZ
	STO	DIGFRE
	JMS	DISPLY
MNLOOP:	JMS     GETCH		; read input
	STO	CURCH
	JSL	DISPCH		; do something
	RCL	CURCH
        CMP     EOF             ; compare with eof
        BEQ     FINIS           ; got eof
        JMP     MNLOOP          ; loop

FINIS:  JMS     TERPRI
        JSL	PUTS
        TEXT    /BYE/
	JMS	TERPRI
	HLT

DISPLY:	NOP
	RCL	CR
	JMS	PUTCH
	CLA
	STO	ZMODE
	
	RLI	DBUF
	STO	DPTR
NXTDIG:	RCL	ZMODE
	BNE	NRMDIG
SUPLZD:	RCL	DPTR
	CPI	DEND
	BEQ	NRMDIG		; last digit
	RCL I 	DPTR
	BNE	NOLZRD		; not a zero
	RCL	SPACE
	JMS 	PUTCH
	JMP	ADVPTR
NOLZRD:	CLA IAC
	STO	ZMODE
NRMDIG:	RCL I 	DPTR
	JMS 	PUTDIG
ADVPTR:	INC 	DPTR
	CPI	DEND
	BGE	NXTDIG
	JMP I 	DISPLY

	PAGE

PUTS:   NOP                     ; print following counted str
        RCL I   PUTS            ; ret vec is ptr
        STO     LEN             ; first word is length
PLOOP:  RCL     PUTS
        IAC
        STO     PUTS            ; increment to first char(s)
        CLL                     ; unflag inword
        JMS     CHKLEN
        RCL I   PUTS            
        SAR
        SAR
        SAR
        SAR
        SAR
        SAR
        CLL
        TAD     ASCII
        JMS     PUTCH
        STL                     ; flag inword
        JMS     CHKLEN
        RCL I   PUTS            ; lower sixbit
        AND     MASK6
        CLL
        TAD     ASCII
        JMS     PUTCH
        JMP     PLOOP
PDONE:  CLA
        TAD     PUTS            ; add inword flag
        STO     PUTS
        JMP I   PUTS

CHKLEN: NOP
        RCL     LEN
        BEQ     PDONE
        CMA IAC
        CMA
        STO     LEN
        JMP I   CHKLEN

LEN:    0                       ; length countdown
ASCII:  40                      ; offset sixbit acsii
MASK6:  77                      ; sixbit mask

DISPCH:	NOP
        RCL	CURCH
        CMP     CHAR0           ; compare to '0'
        BGT     NODIG           ; not a digit
        RCL	CURCH
        CMP     CHAR9           ; compare to '9'
        BLT     NODIG           ; not a digit

	; its a digit

	RCL	DIGFRE		; check if full
	BEQ	NOACTN		; no room

	RCL	DIGFRE		; check if empty
	CMP	DSPSIZ
	BNE	SAVDIG

	JSL	CPYBUF		; copy disp reg to secnd reg
	JSL	CLRDSP		; clear disp reg
	CLA
	STO	BCDCRY		; clear error / overflow

	; put new digit in display buffer
	
SAVDIG:	RLI	DBUF
SFTDIG:	STO	DPTR2
	IAC			; disp buf second digit
	STO	DPTR
	RCL I 	DPTR
	STO I	DPTR2
	RCL	DPTR
	CPI	DEND
	BEQ	NEWDIG
	RCL	DPTR
	JMP	SFTDIG
	
NEWDIG:	RCL	CHAR0
	BUS	CURCH		; get digit value

	STO	DEND		; store rigthmost  

	DEC	DIGFRE
	JMP	REFRSH

NODIG:	RCL	CURCH
        CMP	CHARC           ; compare to 'C'
        BNE	NOCLR
	JSL	CLRDSP
	JMP	REFRSH

NOCLR: 	NOP 

	RCL	CURCH
	CMP	CHARP
	BNE	UNKNWN

	; add op
	RCL	CURCH
	STO   	OPCHAR
	JSL   	ADDOP
	RCL	DSPSIZ
	STO	DIGFRE		; done, disp is virtuel empty
	JMP	REFRSH

UNKNWN:	NOP			; char with unknown action

REFRSH:	RCL	BCDCRY
;	BEQ	DISPOK
;	JSL	CLRDSP
;	JSL	CPYBUF
;	RCL	ERRVAL
;	STO	DEND
DISPOK:	JSL 	DISPLY		; refresh
NOACTN:	JMP I	DISPCH

	PAGE

	; clear disp reg
CLRDSP:	NOP
	RCL	DSPSIZ
	STO	DIGFRE
	RLI	DBUF
	STO	DPTR
CLRLOP:	CLA
	STO I	DPTR
	INC 	DPTR
	CPI	DEND
	BGE	CLRLOP
	JMP I	CLRDSP

CPYBUF:	NOP
	RLI	SBUF
	STO	DPTR2
	RLI	DBUF
	STO	DPTR
CPYLOP:	RCL I 	DPTR		; digit from disp reg
	STO I	DPTR2		; save in secnd reg
	INC 	DPTR2
	INC	DPTR
	CPI	DEND
	BGE	CPYLOP	
	JMP I	CPYBUF

	; add disp reg and secnd reg
ADDOP:	NOP
	CLA
	STO	BCDCRY		; clear bcd carry
	RLI	SEND
	STO	DPTR2
	RLI	DEND
	STO	DPTR
ADDLOP:	RCL I 	DPTR2		; digt from scnd reg
	CLL
	TAD I	DPTR		; add digit from disp reg
	CLL
	TAD	BCDCRY		; add bcd carry
	JMS 	BCDADJ		; bcd adjust
	STO I	DPTR		; save in disp reg
	DEC	DPTR2
	DEC	DPTR
	CPI	DBUF
;XLOP:	SPA SNA
	BLE	ADDLOP
	JMP I	ADDOP

BCDADJ:	NOP
	STO	BCDTMP
	CPI	11		; compare to 9
	SMA SZA
	JMP	NOADJ
	CLA IAC
	STO	BCDCRY		; set carry
	RCL	BCDTMP
	CLL
	TAI	6		; add correction factor
	ANI	17		; mask bcd bits
	JMP	ADJOK
NOADJ:	CLA
	STO	BCDCRY
	RCL	BCDTMP
ADJOK:	JMP I BCDADJ

BCDTMP:	0

; EOF
