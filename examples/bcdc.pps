;
; four digit bcd calculator
;

TTY=    0                       ; TTY is device zero

SAR=    CLL RAR                 ; shift ac right
NEG=	CLL CMA IAC		; negate ac

	MACRO	RLI
	ZMEM	APTR%% \1
	RCL	APTR%%
	ENDM

	MACRO	CPI
	ZMEM	CPTR%% \1
	NEG
	TAD	CPTR%%
	ENDM

	MACRO	JPL
	ZMEM	JVEC%% \1
	JMP I	JVEC%%
	ENDM

	MACRO	JSL
	ZMEM	CVEC%% \1
	JMS I	CVEC%%
	ENDM

BOOT:	JPL	START           ; jumpstart (just in case)

DBUF:	0
	0
	0
DEND:	0			; display reg, four words

SBUF:	0
	0
	0
SEND:	0

DSPSIZ: (DEND-DBUF+1)
DIGFRE:	0

CURCH:	0			; current char

ZMODE:	0
DPTR:	0
DPTR2:	0

EOF:    4                       ; ^D, end of file
NL:     12                      ; ^J, new line
CR:     15                      ; ^M, carriage retuen
SPACE:  40                      ; ' '
CHAR0:  60                      ; 0
CHAR9:  71                      ; 9
CHARP:	43			; plus
CHARM:	45			; minus
CHARC:	103			; C for clear

GETCH:  NOP                     ; get char from tty
WAITI:  SRI     TTY
        JMP     WAITI
        DGA     TTY             ; read char
        JMP I   GETCH

PUTCH:  NOP                     ; print char on tty
WAITO:  SRO     TTY
        JMP     WAITO
        DPA     TTY             ; print char
        JMP I   PUTCH

PUTDIG:	NOP
	CLL
	TAD	CHAR0
	JMS	PUTCH
	JMP I	PUTDIG

TERPRI: NOP                     ; print cr-lf
        RCL     CR              
        JMS     PUTCH
        RCL     NL
        JMS     PUTCH
        JMP I   TERPRI

	PAGE

BANNER: NOP
        JMS     TERPRI
        JSL	PUTS
        TEXT    /BCD CALC/
        JMS     TERPRI
        JMP I   BANNER

START:  JMS     BANNER          ; print startup banner
	RCL	DSPSIZ
	STO	DIGFRE
	JMS	DISPLY
MNLOOP:	JMS     GETCH		; read input
	STO	CURCH
	JSL	DISPCH		; do something
	RCL	CURCH
	NEG
        TAD     EOF             ; compare with eof
        SNA
        JMP     FINIS           ; got eof
        JMP     MNLOOP          ; loop

FINIS:  JMS     TERPRI
        JSL	PUTS
        TEXT    /BYE/
	JMS	TERPRI
	HLT

DISPLY:	NOP
	RCL	CR
	JMS	PUTCH
	CLA
	STO	ZMODE
	
	RLI	DBUF
	STO	DPTR
NXTDIG:	RCL	ZMODE
	SZA
	JMP	NRMDIG
SUPLZD:	RCL	DPTR
	CPI	DEND
	SNA
	JMP	NRMDIG		; last digit
	RCL I 	DPTR
	SZA
	JMP	NOLZRD		; not a zero
	RCL	SPACE
	JMS 	PUTCH
	JMP	ADVPTR
NOLZRD:	CLA IAC
	STO	ZMODE
NRMDIG:	RCL I 	DPTR
	JMS 	PUTDIG
ADVPTR:	RCL 	DPTR
	IAC
	STO 	DPTR		; incremented
	CPI	DEND
	SMA
	JMP	NXTDIG
	JMP I 	DISPLY

	PAGE

PUTS:   NOP                     ; print following counted str
        RCL I   PUTS            ; ret vec is ptr
        STO     LEN             ; first word is length
PLOOP:  RCL     PUTS
        IAC
        STO     PUTS            ; increment to first char(s)
        CLL                     ; unflag inword
        JMS     CHKLEN
        RCL I   PUTS            
        SAR
        SAR
        SAR
        SAR
        SAR
        SAR
        CLL
        TAD     ASCII
        JMS     PUTCH
        STL                     ; flag inword
        JMS     CHKLEN
        RCL I   PUTS            ; lower sixbit
        AND     MASK6
        CLL
        TAD     ASCII
        JMS     PUTCH
        JMP     PLOOP
PDONE:  CLA
        TAD     PUTS            ; add inword flag
        STO     PUTS
        JMP I   PUTS

CHKLEN: NOP
        RCL     LEN
        SNA
        JMP     PDONE
        CMA IAC
        CMA
        STO     LEN
        JMP I   CHKLEN

LEN:    0                       ; length countdown
ASCII:  40                      ; offset sixbit acsii
MASK6:  77                      ; sixbit mask

DISPCH:	NOP
        RCL	CURCH
        NEG
        TAD     CHAR0           ; compare to '0'
        SMA SZA                 ; inverted cond
        JMP     NODIG           ; not a digit
        RCL	CURCH
        NEG
        TAD     CHAR9           ; compare to '9'
        SPA                     ; inverted cond
        JMP     NODIG           ; not a digit

	; its a digit

	RCL	DIGFRE		; check if full
	SNA
	JMP	NOACTN		; no room

	; put new digit in display buffer
	
	RLI	DBUF
SFTDIG:	STO	DPTR2
	IAC			; disp buf second digit
	STO	DPTR
	RCL I 	DPTR
	STO I	DPTR2
	RCL	DPTR
	CPI	DEND
	SNA
	JMP	NEWDIG
	RCL	DPTR
	JMP	SFTDIG
	
NEWDIG:	RCL	CHAR0
	NEG
	TAD	CURCH		; get digit value

	STO	DEND		; store rigthmost  

	CLA CLL CMA		; load -1
	TAD 	DIGFRE
	STO	DIGFRE
	JMP	REFRSH

NODIG:	RCL	CURCH
        NEG
        TAD     CHARC           ; compare to 'C'
        SZA
        JMP     NOCLR

	; clear disp reg
	RCL	DSPSIZ
	STO	DIGFRE
	RLI	DBUF
	STO	DPTR
CLRLOP:	CLA
	STO I	DPTR
	RCL 	DPTR
	IAC
	STO	DPTR
	CPI	DEND
	SMA
	JMP	CLRLOP
	JMP	REFRSH

NOCLR:	NOP

REFRSH:	JSL 	DISPLY		; refresh
NOACTN:	JMP I	DISPCH

; EOF
