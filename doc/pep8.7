.do hla de
.do hpf hyphen.den
.TH PEP8 7 "2005-07-11" "pep\-8 Projekt" "pep\-8 Projekt Handbuch" \" -*- nroff -*-
.SH NAME
pep-8 \- Beschreibung der pep-8 Architektur
.SH BESCHREIBUNG
Der
.BR pep\-8
(Practical Education Processor based on pdp-8) ist von der
.BR "DEC pdp-8"
abgeleitet und soll der Vermittlung grundlegender Konzepte
von Rechnerarchitekturen und Assemblerprogrammierung dienen.
.SH PROGRAMMIERMODELL
Der extrem einfach aufgebaute pep-8 Prozessor besteht aus einem
Programmzähler (Program Counter, PC) und einem Akkumulator (Accumulator, AC),
die zwölf Bit breit sind sowie dem Verbindungsbit (Link Bit, L).
Der Speicher ist ebenfalls 12 Bit breit ist und wird
mit 12 Bit Adressen angesprochen. Er umfasst also 4096
12\-Bit Worte. Andere Einheiten als ein 12\-Bit Wort
können nicht adressiert werden.
Die Bits eines Wortes werden von null bis elf durchnummeriert, wobei Bit null das
signifikateste Bit ist:
.PP
.TS
center tab(&) ;
| c | c | c | c | c | c | c | c | c | c | c | c |
| c | c | c | c | c | c | c | c | c | c | c | c |
| c | c | c | c | c | c | c | c | c | c | c | c | .
_&_&_&_&_&_&_&_&_&_&_&_
 0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
.TE
.SH ADRESSIERUNGSARTEN
Bei allen Befehlen, die einen Hauptspeicheroperanden haben, wird dessen
Adresse in Bit fünf bis elf codiert. Der Speicher ist logisch in Seiten
zu 128 Worten aufgeteilt und eine Operandenadresse ist immer relativ zum
Beginn der Speicherseite, in der sich der Befehl befindet, oder der
Seite null ("Zero Page"). Welche dieser Alternativen gewählt wird enscheidet
das "Zero Page" Bit, das im Befehl in Bit vier gespeichert wird.
Ist es null, wird relativ zur Seite null adressert, sonst relativ zur
laufenden Seite.
Wird das Indirekt\-Bit gesetzt, das sich in Bit 3
befindet, so wird der Operand als 12\-Bit Zeiger auf ein Speicherwort
betrachtet, auf das sich der Befehl dann bezieht.
Das ergibt die folgenden Adressierungsarten:
.PP
.TS
center tab(&) ;
| l | c | c | c | l |.
_&_&_&_&_
Name & I & ZP & Bits & Erreichbare Worte
_&_&_&_&_
Seitenrelativ & 0 & 1 & 7 Bit & In der aktuellen Seite
Zero Page & 0 & 0 & 7 Bit & In der nullten Seite
Indirekt & 1 & 1 & 12 Bit & Im gesamten Speicher, Zeiger in der aktuellen Seite
Indirekt Zero Page & 1 & 0 & 12 Bit & Im gesamten Speicher, Zeiger in der nullten Seite
_&_&_&_&_
.TE
.PP
Die effektive Adresse für jeden Befehl mit einem Hauptspeicheroperanden
berrechnet sich aus der Adresse im Befehl (7 Bit, A0-7) und der effektiven Seite 
(effective page, P0-4).
Die effektive Seite ist Null wenn das Zero\-Page\-Bit null ist, und entspricht 
sonst den fünf signifikatesten Bits des Programmzählers. 
.PP
.TS
center tab(&) ;
| c | c | c | c | c | c | c | c | c | c | c | c |
| c | c | c | c | c | c | c | c | c | c | c | c |
| c | c | c | c | c | c | c | c | c | c | c | c |
cccccccccccc.
_&_&_&_&_&_&_&_&_&_&_&_
0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
P0&P1&P2&P3&P4&A0&A1&A2&A3&A4&A5&A6
.TE
.PP
Ist das Indirekt\-Bit
gesetzt wird dieser Wert noch dereferenziert, d.h. der Inhalt des durch ihn 
adressierten Speicherwortes bildet die effektive Adresse. 
Wird nicht indirekt adressiert, bildet der Wert aus effektiver Seite und 
Adresse im Befehlswort direkt die effektive Adresse.
.SH BEFEHLE
Der pep-8 Prozessor verfügt über sieben Befehle die auf dem Hauptspeicher
operieren. Bei diesen wird der Operationscode in den Bits null bis drei
abgelegt. Zu jeden Befehl sind die Mnemonische
Abkürzung, der englische Begriff aus den sich diese ableitet, sowie der
Operationscode in Binärdarstellung aufgeführt.
.TP
.BR RCL " (Recall, 000)"
Läd das im Hauptspeicher adressierte Wort in den Akkumulator.
.TP
.BR STO " (Store, 001) "
Speichert den Akkumulator im adressierten Speicherwort.
.TP
.BR AND " (And accumulator, 010)"
Der Akkumulator wird mit dem adressierten Wort bitweise und-verknüpft.
Das Ergebnis wird in den Akkumulator zurückgeschrieben.
.TP
.BR ORA " (Or accumulator, 011)"
Der Akkumulator wird mit dem adressierten Wort bitweise oder-verknüpft.
Das Ergebnis wird in den Akkumulator zurückgeschrieben.
.TP
.BR TAD " (Two's Complement Add, 100)"
Der Operand wird zu dem 13\-Bit Wert der duch das
Verbindungsbit und Akkumulator gebildet wird (L, AC) addiert. Negative
Zahlen werden im Zweierkomplement repräsentiert.
.TP
.BR JMP " (Jump, 101)"
Das adressierte Hauptspeicherwort wird in den Programmzähler geladen.
Es wird also zur angegebenen Adresse gesprungen.
.TP
.BR JMS " (Jump to Subroutine, 110)"
Der Programmzähler wird im adressierten Hauptspeicherwort gespeichert.
Dann wird die Adresse des darauf folgenden Speicherwortes in den
Programmzähler geladen. Es wird also tatsächlich zu der Adresse gesprungen 
die auf die angegebene Adresse folgt. Ein Rücksprung erfolgt dann über einen
indirekten Sprung mit der Startadresse der Routine als Argument.
.PP
Die verbleibende Bitkombination 
.I 111 
(OPR, Operate) identifiziert einen der restlichen Befehle
des pep-8, die keinen Hauptspeicheroperanden benötigen und deshalb
die Bits drei bis elf zur Bestimmung des Befehls heranziehen können. Zu jedem
Befehl wird hier der vollständige 12\-Bit Befehlscode als Oktalzahl angegeben.
.PP
.I "Befehle die den internen Zustand ändern"
.PP
Diese Befehle können in einem Befehlswort kombiniert werden.
Bei diesen Befehlen ist Bit 3 auf null. Den Bits 4 bis 11 ist jeweils eine Operation zugeordnet.
Ist keines dieser Bits gesetzt, wird auch keine Operation ausgeführt 
.RI ( "No Operation" ). 
Die Operationen werden schrittweise abgearbeitet, beginnend mit Bit 4 bis Bit 11 
fortschreitend. So haben die verschiedenen Bitkombinationen eine definierte Bedeutung (CLA CMA löscht erst den 
Akkumulator und invertiert ihn dann).
.TP
.BR NOP " (No Operation, 7000)"
Nichtstun. Kann mit keinem anderen Befehl kombiniert werden.
.TP
.BR CLA " (Clear accumulator, 7200)"
Akkumulator auf Null setzen.
.TP
.BR CLL " (Clear Link Bit, 7100)"
Verbindungsbit auf Null setzen.
.TP
.BR CMA " (Complement accumulator, 7040)"
Einerkomplement des Akkumulators bilden und dort ablegen.
.TP
.BR CML " (Complement Link, 7020)"
Verbindungsbit invertieren.
.TP
.BR RAR " (Rotate right Link and accumulator, 7010)"
Den 13\-Bit Wert Verbindungsbit-Akkumulator (L+AC) nach rechts rotieren.
.TP
.BR RAL " (Rotate left Link and accumulator, 7004)"
Den 13\-Bit Wert Verbindungsbit-Akkumulator (L+AC) nach links rotieren.
.TP
.BR DAC " (Decrement accumulator, 7002)"
Akkumulator um eins vermindern, Verbindungsbit wird bei Unterlauf invertiert.
.TP
.BR IAC " (Increment accumulator, 7001)"
Akkumulator um eins erhöhen, Verbindungbit wird bei Überlauf invertiert.
.PP
Kombinationen aus Befehlen denen Mnemonische Abkürzungen zugeordnet sind:
.TP
.BR STA " (Set accumulator, 7240, CLA CMA)"
Alle Bits des Akkumulators auf Eins setzen.
.TP
.BR STL " (Set Link Bit, 7120, CLL CML)"
Verbindungsbit auf Eins setzen.
.TP
.BR CIA " (Complement and increment accumulator, 7041, CMA IAC)"
Bildet das Zweierkomplement des Akkumulators.
.PP
Befehlskomnination ermöglicht kompakte Subtraktion, die ja keinen eigenen Befehl hat.
Man läd den Subtrahenden in den Akkumulator und wendet den kombinierten
Befehl
.B "CMA IAC" 
bzw. 
.B "CIA"
(7041) an, der das Zweierkomplement bildet.
Anschließend wird mit
.B TAD
der Minuend addiert und die Differenz steht im Akkumulator. Wenn nötig kann
im ersten Schritt zusätzlich noch das Verbindungsbit gelöscht werden (CLL) womit sich dann
das Bitmuster 7141 (
.B "CLL CMA IAC"
) ergibt.
.PP
.I "Befehle die den Programmfluß verändern"
.PP
Bei diesen Befehlen ist Bit 3 gesetzt und Bit 4 auf null.
Diese Befehle können in einem Befehlswort kombiniert werden, solange die 
Befehle zum gleichen Kombinationstyp gehören. 
Die Sprungbedingungen entsprechend den Bits 6 bis 8
werden oder-verknüpft, wenn Bit 9 des Befehlswortes null ist
.RI ( Oder-Typ ).
Ist Bit 9 eins, wird die Bedingung invertiert, d.h. der Sprung wird nicht genommen, wenn 
eine der durch Bit 6 bis 8 selektierten Bedingungen wahr ist. Dadurch ergeben sich drei neue 
Sprungbedingungen, die und-verknüft werden, um zu bestimmen ob der Sprung genommen wird
.RI ( Und-Typ ). 
Ist keines der Bedingungsbits 6 bis 8 gesetzt wird niemals gesprungen
.RI ( "Skip never" ),
effektiv ein (zweites) NOP. Wird ohne eine Bedingung auszuwählen, die Bedeutung 
mit Bit 9 invertiert, wird immer gesprungen 
.RI ( "Skip always" ).
Ist Bit 11 gesetzt wird der Prozessor angehalten. Bit 5 ist ungenutzt.
.TP
.BR SKN " (Skip never, no operation, 7400)"
Nicht springen - nichtstun.
.TP
.BR HLT " (Halt the program, 7401)"
Das Programm anhalten.
.TP
.BR SKP " (Skip always, 7404)"
Den Programmzähler erhöhen. (ohne Bedingung)
.TP
.BR SNL " (Skip on non-zero Link, 7410, Oder-Typ)"
Wenn das Verbindungsbit nicht null ist, den Programmzähler erhöhen.
.TP
.BR SZA " (Skip on zero accumulator, 7420, Oder-Typ)"
Wenn der Akkumulator null ist, den Programmzähler erhöhen.
.TP
.BR SMA " (Skip on minus accumulator, 7440, Oder-Typ)"
Bei negativem Akkumulator den Programmzähler erhöhen.
.TP
.BR SZL " (Skip on zero Link, 7414, Und-Typ)"
Wenn das Verbindungsbit null ist, den Programmzähler erhöhen.
.TP
.BR SNA " (Skip on non-zero accumulator, 7424, Und-Typ)"
Wenn der Akkumulator nicht null ist, den Programmzähler erhöhen.
.TP
.BR SPA " (Skip on plus accumulator, 7444, Und-Typ)"
Bei positivem Akkumulator den Programmzähler erhöhen.
.PP
.I "Befehle zum Ansprechen von Ein-/Ausgabegeräten"
.PP
Mit diesen Befehlen werden Ein-/Ausgabegeräte angesteuert.
Der pep-8 Prozessor unterstützt bis zu 16 Geräte die 
mehrere Untereinheiten unterstützen können.
Bei diesen Befehlen sind Bit 3 und Bit 4 gesetzt.
Das jeweils angesprochene Gerät wird im Befehlswort in den Bits 8 bis 11 kodiert.
Die angegeben Mnemonischen Abkürzungen gelten für 
zeichenorientierte Geräte. Andere Geräte können die Bits 5 bis 7 
unter Umständen anders verwenden.
Diese Befehle können nicht kombiniert werden.
.TP
.BR SRI " (Skip on ready for input, 7460)"
Den Programmzähler erhöhen wenn der Eingabekanal bereit ist.
.TP
.BR SRO " (Skip on ready for output, 7462)"
Den Programmzähler erhöhen wenn der Ausgabekanal bereit ist.
.TP
.BR DGA " (Device get word to accumulator, 7564)"
Den  Akkumulator mit dem aktuellen Wert des Eingabekanals laden.
.TP
.BR DPA " (Device put word from accumulator, 7566)"
Den Wert des Akkumulators in den Ausgabekanal schreiben.
.TP
.BR DUS " (Device unit select, 7670)"
Untereinheit gemäß dem Wert im Akkumulator auswählen.
.TP
.BR DGS " (Device get status word, 7672)"
Statuswort des Geräts bzw. der Untereinheit im Akkumulator speichern.
.TP
.BR DSM " (Device sense mask, 7774)"
Den Wert des Akkumulators als Meldungsauswahlmaske an das Gerät 
übergeben.
.TP
.BR RSD " (Reset device, 7776)"
Das Gerät zurücksetzen und Untereinheit null auswählen.
.PP
.SH GERÄTE
.I Teletype, Gerät 0 (Null)
.PP
In Verbindung mit dem Terminalsimulator 
.BR teletype (1)
kann 
.BR pepsi (1)
Zeichen ein- und ausgeben, wenn das Gerät beim Start freigeschaltet wird.
Das Teletype (TTY) unterstützt die Befehle 
.BR SRI ",  " SRO ", " DGA " und " DPA . 
.PP
.I Papertape Reader, Gerät 1
.PP
Dem Gerät wird beim Freischalten eine Datei zugewiesen aus der  Einzelzeichen gelesen 
werden können. Am Dateiende geht das Grät in den nicht-bereit Zustand. Der Papertape 
Reader unterstützt die Befehle 
.BR SRI " und " DGA .
.PP
.I X/Y-Point Plotter (Scope), Gerät 2
.PP
Diese Gerät simuliert ein Oszilloskop dessen X- und Y-Eingänge über zwei AD-Wandler angesteuert werden. 
Programmgesteuert kann - nach der Ansteuerung der korrekten Koordinaten - der Elektronenstrahl kurz verstärkt 
werden und so ein Punkt im (lang nachleuchtenden) Phosphor des Bildschirms erzeugt werden.
.SH SIEHE AUCH
.BR pot (1),
.BR pot (5),
.BR pepsi (1)
.BR teletype (1)
.BR scope (1)