.do hla de
.do hpf hyphen.den
.TH PEP8 7 "2005-07-11" "pep\-8 Projekt" "pep\-8 Projekt Handbuch" \" -*- nroff -*-
.SH NAME
pep-8 \- Beschreibung der pep-8 Architektur
.SH BESCHREIBUNG
Der
.BR pep\-8
(Practical Education Processor based on pdp-8) ist von der
.BR "DEC pdp-8"
abgeleitet und soll der Vermittlung grundlegender Konzepte
von Rechnerarchitekturen und Assemblerprogrammierung dienen.
.PP
Der Prozessor lehnt sich am historischen Prozessor der
.IB "DEC " pdp-8
an, vereinfacht aber an vielen Stellen und nimt keine Rücksticht
auf die tatsächliche Implementierung in Hardware. Für Fortgeschrittenen
werden Ein-/Ausgabegeräte und Unterbrechungsverarbeitung unterstützt.
.SH PROGRAMMIERMODELL
Der extrem einfach aufgebaute pep-8 Prozessor besteht aus einem
Programmzähler (Program Counter, PC) und einem Akkumulator (Accumulator, AC),
die zwölf Bit breit sind sowie dem Verbindungsbit (Link Bit, L).
Der Speicher ist ebenfalls 12 Bit breit ist und wird
mit 12 Bit Adressen angesprochen. Er umfasst also 4096
12\-Bit Worte. Andere Einheiten als ein 12\-Bit Wort
können nicht adressiert werden.
Die Bits eines Wortes werden von null bis elf durchnummeriert, wobei Bit null das
signifikateste Bit ist:
.PP
.in +.4i
.ll -.4i
.TS
expand tab(&) allbox;
ce ce ce ce ce ce ce ce ce ce ce ce .
 0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
.TE
.in -.4i
.ll +.4i

.SH ADRESSIERUNGSARTEN
Bei allen Befehlen, die einen Hauptspeicheroperanden haben, wird dessen
Adresse in Bit fünf bis elf codiert. Der Speicher ist logisch in Seiten
zu 128 Worten aufgeteilt und eine Operandenadresse ist immer relativ zum
Beginn der Speicherseite, in der sich der Befehl befindet, oder der
Seite null ("Zero Page"). Welche dieser Alternativen gewählt wird enscheidet
das "Zero Page" Bit, das im Befehl in Bit vier gespeichert wird.
Ist es null, wird relativ zur Seite null adressert, sonst relativ zur
laufenden Seite.
Wird das Indirekt\-Bit gesetzt, das sich in Bit 3
befindet, so wird der Operand als 12\-Bit Zeiger auf ein Speicherwort
betrachtet, auf das sich der Befehl dann bezieht. In den Bits 0 bis 2 wird
der Befehl kodiert.
.PP
.in +.4i
.ll -.4i
.TS
expand tab(&) ;
ce ce ce ce ce ce ce ce ce ce ce ce 
| ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | .
 B0& B1& B2& I& ZP& A0& A1& A2& A3& A4& A5& A6
_&_&_&_&_&_&_&_&_&_&_&_
 0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
.TE
.in -.4i
.ll +.4i

Das ergibt die folgenden Adressierungsarten:
.PP
.PP
.TS
center tab(&) ;
| l | c | c | c | l |.
_&_&_&_&_
Name & I & ZP & Bits & Erreichbare Worte
_&_&_&_&_
Seitenrelativ & 0 & 1 & 7 Bit & In der aktuellen Seite
Zero Page & 0 & 0 & 7 Bit & In der nullten Seite
Indirekt & 1 & 1 & 12 Bit & Im gesamten Speicher, Zeiger in der aktuellen Seite
Indirekt Zero Page & 1 & 0 & 12 Bit & Im gesamten Speicher, Zeiger in der nullten Seite
_&_&_&_&_
.TE

.PP
Die effektive Adresse für jeden Befehl mit einem Hauptspeicheroperanden
berrechnet sich aus der Adresse im Befehl (7 Bit, A0-7) und der effektiven Seite 
(effective page, P0-4).
Die effektive Seite ist Null wenn das Zero\-Page\-Bit null ist, und entspricht 
sonst den fünf signifikatesten Bits des Programmzählers. 
.PP
.in +.4i
.ll -.4i
.TS
expand tab(&) ;
ce ce ce ce ce ce ce ce ce ce ce ce 
| ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | .
P0&P1&P2&P3&P4&A0&A1&A2&A3&A4&A5&A6
_&_&_&_&_&_&_&_&_&_&_&_
0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
.TE
.in -.4i
.ll +.4i

.PP
Ist das Indirekt\-Bit
gesetzt wird dieser Wert noch dereferenziert, d.h. der Inhalt des durch ihn 
adressierten Speicherwortes bildet die effektive Adresse. 
Wird nicht indirekt adressiert, bildet der Wert aus effektiver Seite und 
Adresse im Befehlswort direkt die effektive Adresse.
.bp
.SH BEFEHLE
Der pep-8 Prozessor verfügt über sieben Befehle die auf dem Hauptspeicher
operieren. Bei diesen wird der Operationscode in den Bits null bis drei
abgelegt. Zu jeden Befehl sind die Mnemonische
Abkürzung, der englische Begriff aus den sich diese ableitet, sowie der
Operationscode in Binärdarstellung aufgeführt.
.TP
.BR RCL " (Recall, 000)"
Läd das im Hauptspeicher adressierte Wort in den Akkumulator.
.TP
.BR STO " (Store, 001) "
Speichert den Akkumulator im adressierten Speicherwort.
.TP
.BR AND " (And accumulator, 010)"
Der Akkumulator wird mit dem adressierten Wort bitweise und-verknüpft.
Das Ergebnis wird in den Akkumulator zurückgeschrieben.
.TP
.BR ORA " (Or accumulator, 011)"
Der Akkumulator wird mit dem adressierten Wort bitweise oder-verknüpft.
Das Ergebnis wird in den Akkumulator zurückgeschrieben.
.TP
.BR TAD " (Two's Complement Add, 100)"
Der Operand wird zu dem 13\-Bit Wert der duch das
Verbindungsbit und Akkumulator gebildet wird (L, AC) addiert. Negative
Zahlen werden im Zweierkomplement repräsentiert.
.TP
.BR JMP " (Jump, 101)"
Das adressierte Hauptspeicherwort wird in den Programmzähler geladen.
Es wird also zur angegebenen Adresse gesprungen.
.TP
.BR JMS " (Jump to Subroutine, 110)"
Der Programmzähler wird im adressierten Hauptspeicherwort gespeichert.
Dann wird die Adresse des darauf folgenden Speicherwortes in den
Programmzähler geladen. Es wird also tatsächlich zu der Adresse gesprungen 
die auf die angegebene Adresse folgt. Ein Rücksprung erfolgt dann über einen
indirekten Sprung mit der Startadresse der Routine als Argument.
.PP
Die verbleibende Bitkombination 
.I 111 
(OPR, Operate) identifiziert einen der restlichen Befehle
des pep-8, die keinen Hauptspeicheroperanden benötigen und deshalb
die Bits drei bis elf zur Bestimmung des Befehls heranziehen können. Zu jedem
Befehl wird hier der vollständige 12\-Bit Befehlscode als Oktalzahl angegeben.
.PP
.I "Befehle die den internen Zustand ändern"
.PP
Diese Befehle können in einem Befehlswort kombiniert werden.
Bei diesen Befehlen ist Bit 3 auf null. Den Bits 4 bis 11 ist jeweils eine Operation zugeordnet.
.PP
.in +.4i
.ll -.4i
.TS
expand tab(&) ;
ce ce ce ce ce ce ce ce ce ce ce ce 
ce ce ce ce le s le s le s le s 
ce ce ce ce ce le s le s le s le 
ce ce ce ce ce ce ce ce ce ce ce ce 
| ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | .
&&&&&&&&&&&
&&&&CLA&CMA&RAR&DAC
1&1&1&0&&CLL&CML&RAL&IAC
_&_&_&_&_&_&_&_&_&_&_&_
0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
.TE
.in -.4i
.ll +.4i

.PP
Ist keines dieser Bits gesetzt, wird auch keine Operation ausgeführt 
.RI ( "No Operation" ). 
Die Operationen werden schrittweise abgearbeitet, beginnend mit Bit 4 bis Bit 11 
fortschreitend. So haben die verschiedenen Bitkombinationen eine definierte Bedeutung 
(CLA CMA löscht erst den Akkumulator und invertiert ihn dann).
.TP
.BR NOP " (No Operation, 7000)"
Nichtstun. Kann mit keinem anderen Befehl kombiniert werden.
.TP
.BR CLA " (Clear accumulator, 7200)"
Akkumulator auf Null setzen.
.TP
.BR CLL " (Clear Link Bit, 7100)"
Verbindungsbit auf Null setzen.
.TP
.BR CMA " (Complement accumulator, 7040)"
Einerkomplement des Akkumulators bilden und dort ablegen.
.TP
.BR CML " (Complement Link, 7020)"
Verbindungsbit invertieren.
.TP
.BR RAR " (Rotate right Link and accumulator, 7010)"
Den 13\-Bit Wert Verbindungsbit-Akkumulator (L+AC) nach rechts rotieren.
.TP
.BR RAL " (Rotate left Link and accumulator, 7004)"
Den 13\-Bit Wert Verbindungsbit-Akkumulator (L+AC) nach links rotieren.
.TP
.BR DAC " (Decrement accumulator, 7002)"
Akkumulator um eins vermindern, Verbindungsbit wird bei Unterlauf invertiert.
.TP
.BR IAC " (Increment accumulator, 7001)"
Akkumulator um eins erhöhen, Verbindungbit wird bei Überlauf invertiert.
.PP
Kombinationen aus Befehlen denen Mnemonische Abkürzungen zugeordnet sind:
.TP
.BR STA " (Set accumulator, 7240, CLA CMA)"
Alle Bits des Akkumulators auf Eins setzen.
.TP
.BR STL " (Set Link Bit, 7120, CLL CML)"
Verbindungsbit auf Eins setzen.
.TP
.BR CIA " (Complement and increment accumulator, 7041, CMA IAC)"
Bildet das Zweierkomplement des Akkumulators.
.PP
Befehlskomnination ermöglicht kompakte Subtraktion, die ja keinen eigenen Befehl hat.
Man läd den Subtrahenden in den Akkumulator und wendet den kombinierten
Befehl
.B "CMA IAC" 
bzw. 
.B "CIA"
(7041) an, der das Zweierkomplement bildet.
Anschließend wird mit
.B TAD
der Minuend addiert und die Differenz steht im Akkumulator. Wenn nötig kann
im ersten Schritt zusätzlich noch das Verbindungsbit gelöscht werden (CLL) womit sich dann
das Bitmuster 7141 (
.B "CLL CMA IAC"
) ergibt.
.PP
.I "Befehle die den Programmfluß verändern"
.PP
Bei diesen Befehlen ist Bit 3 gesetzt und Bit 4 auf null.
Diese Befehle können in einem Befehlswort kombiniert werden, solange die 
Befehle zum gleichen Kombinationstyp gehören. 
Die Sprungbedingungen entsprechend den Bits 6 bis 8
werden oder-verknüpft, wenn Bit 5 des Befehlswortes null ist
.RI ( Oder-Typ ).
.PP
Ist Bit 5 eins, wird die Bedingung invertiert, d.h. der Sprung wird nicht genommen, wenn 
eine der durch Bit 6 bis 8 selektierten Bedingungen wahr ist. Dadurch ergeben sich drei neue 
Sprungbedingungen, die und-verknüft werden, um zu bestimmen ob der Sprung genommen wird
.RI ( Und-Typ ).
.PP
Ist keines der Bedingungsbits 6 bis 8 gesetzt wird niemals gesprungen
.RI ( "Skip never" ),
effektiv ein (zweites) NOP. Wird dies mit 
mit Bit 5 invertiert, wird immer gesprungen 
.RI ( "Skip always" ).
.PP
.in +.4i
.ll -.4i
.TS
expand tab(&) ;
ce ce ce ce ce ce ce ce ce ce ce ce 
ce ce ce ce le s le s le s le s 
ce ce ce ce ce le s le s le s le 
ce ce ce ce ce ce ce ce ce ce ce ce 
| ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | .
&&&&&&&&&&&
&&&&&SMA&SNL
1&1&1&1&0&Inv&SZA&
_&_&_&_&_&_&_&_&_&_&_&_
0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
.TE
.in -.4i
.ll +.4i

.PP
.TP
.BR SKN " (Skip never, no operation, 7400)"
Nicht springen - nichtstun.
.TP
.BR SNL " (Skip on non-zero Link, 7410, Oder-Typ)"
Wenn das Verbindungsbit nicht null ist, den Programmzähler erhöhen.
.TP
.BR SZA " (Skip on zero accumulator, 7420, Oder-Typ)"
Wenn der Akkumulator null ist, den Programmzähler erhöhen.
.TP
.BR SMA " (Skip on minus accumulator, 7440, Oder-Typ)"
Bei negativem Akkumulator den Programmzähler erhöhen.
.TP
.BR SKP " (Skip always, 7500)"
Den Programmzähler erhöhen. (ohne Bedingung)
.TP
.BR SZL " (Skip on zero Link, 7510, Und-Typ)"
Wenn das Verbindungsbit null ist, den Programmzähler erhöhen.
.TP
.BR SNA " (Skip on non-zero accumulator, 7520, Und-Typ)"
Wenn der Akkumulator nicht null ist, den Programmzähler erhöhen.
.TP
.BR SPA " (Skip on plus accumulator, 7540, Und-Typ)"
Bei positivem Akkumulator den Programmzähler erhöhen.
.PP
.I "Befehle zum Ansprechen von Ein-/Ausgabegeräten"
.PP
Mit diesen Befehlen werden Ein-/Ausgabegeräte angesteuert.
Der pep-8 Prozessor unterstützt bis zu 16 Geräte (0..15) die 
mehrere Untereinheiten unterstützen können.
Bei diesen Befehlen sind Bit 3 und Bit 4 gesetzt.
Das jeweils angesprochene Gerät wird im Befehlswort in den Bits 8 bis 11 kodiert. In den Bits 5 bis 7 ist der E/A Kode, der die Operation bestimmt gespeichert.
.PP
.in +.4i
.ll -.4i
.TS
expand tab(&) ;
ce ce ce ce ce ce ce ce ce ce ce ce 
| ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | ce | .
 1 & 1 & 1 & 1 & 1 & I0& I1& I2& D0& D1& D2& D3
_&_&_&_&_&_&_&_&_&_&_&_
 0& 1& 2& 3& 4& 5& 6& 7& 8& 9&10&11
_&_&_&_&_&_&_&_&_&_&_&_
.TE
.in -.4i
.ll +.4i

Die angegeben Mnemonischen Abkürzungen gelten für 
zeichenorientierte Geräte. Andere Geräte können die Bits 5 bis 7 
unter Umständen anders verwenden.
Diese Befehle können nicht kombiniert werden.
.TP
.BR SRI " (Skip on ready for input, 7600)"
Den Programmzähler erhöhen wenn der Eingabekanal bereit ist.
.TP
.BR SRO " (Skip on ready for output, 7620)"
Den Programmzähler erhöhen wenn der Ausgabekanal bereit ist.
.TP
.BR DGA " (Device get word to accumulator, 7640)"
Den  Akkumulator mit dem aktuellen Wert des Eingabekanals laden.
.TP
.BR DPA " (Device put word from accumulator, 7660)"
Den Wert des Akkumulators in den Ausgabekanal schreiben.
.TP
.BR DUS " (Device unit select, 7700)"
Untereinheit gemäß dem Wert im Akkumulator auswählen.
.TP
.BR DGS " (Device get status word, 7720)"
Statuswort des Geräts bzw. der Untereinheit im Akkumulator speichern.
.TP
.BR DSM " (Device sense mask, 7740)"
Den Wert des Akkumulators als Meldungsauswahlmaske an das Gerät 
übergeben.
.TP
.BR RSD " (Reset device, 7760)"
Das Gerät zurücksetzen und Untereinheit null auswählen.
.PP
.SH UNTERBRECHUNGEN
Der
.BR pep8 (7)
unterstützt Unterbrechungen durch Ein-/Ausgabegeräte. Sind Unterbrechungen
freigeschaltet und ein Gerät erzeugt eine Unterbrechungsanforderung, so
wird nach Beendigung des aktuellen Befehls ein implezites
.B JMS I 0
durchgeführt. Es wird also die Addresse des Befehls, der ohne vorliegen einer
Unterbrechungsanforderung ausgeführt worden wäre in Adresse 0 (Null)
gespeichert und die Ausführung an Adresse 1 fortgesetzt. Ausserden wird
die Unterbrechungsverarbeitung blockeier, so das die Rücksprungadresse nicht
von einer weiteren Unterbrechung überschrieben werden kann.
.PP
Da verschiedene Geräte eine Unterbrechung anfordern können, ist es Aufgabe der
Unterbrechungs-Bearbitungsroutine festzustellen welches Gerät die Unterbrechung
angefordert hat. Ausserdem hat die Routine dafür zu sorgen das der Inhalt von
Akkumulator und Verbindungsbit gesichert werden, damit sie beim Ende der
Unterbrechungsroutine wieder in den Zustand versetzt werden können die sie
bei der Unterbrechung hatten.
.PP
Am Ende der Routine können dann auch die Unterbrechungen wieder ativiert
werden, bevor über ein
.B JMP I 0
der normale Programmablauf wieder aufgenommen wird.
.PP
Das aktivieren und deaktivieren der Unterbrechungsverarbeitung geschieht über
das
.I Prozessor
Gerät mit der Nummer 15 mit Hilfe der Befehle
.B ION
.I (Interrupts On)
und
.B IOF
.IR "(Interrupts Off)" .
Für jedes Gerät, das Unterbrechungen unterstützt, müssen diese über die
Meldungsauswählmaske freigeschaltet werden. Es wird alo nur eine
Unterbrechung angefordert wenn Unterbrechungen grundsätzlich über
.B ION
freigeschaltet sind und zusätzlich die entsprechende Gerätespezifische
Unterbrechung über die Meldungsauswahlmaske freigeschaltet ist.
.SH GERÄTE
.I Teletype, Gerät 0 (Null)
.PP
In Verbindung mit dem Terminalsimulator 
.BR teletype (1)
kann 
.BR pepsi (1)
Zeichen ein- und ausgeben, wenn das Gerät beim Start freigeschaltet wird.
Das Teletype (TTY) unterstützt die Befehle 
.BR SRI ",  " SRO ", " DGA ", " DPA " und " DSM .
.PP
Über das Bit 0 der Auswahlmaske für
.B DSM
wird das Gerät veranlasst bei
vorliegen eines Eingabezeichens eine Unterbrechung auszulösen. Bei freigeschalteten Unterbrechungen kann si mit
.B "CLA CLL CML RAR"
eine 1 in Bit 0 des Akkumulators geladen werden, um dann mit
.B "DSM 0"
die Unterbrechungen beim Vorliegen eines Eingabezeichens zu aktivieren.
.PP
.BR pepsi (1) 
kommuniziert mit dem Terminalsimulator über einen TCP Verbindung, wobei 
.BR teletype (1) 
den Server implementiert und 
.BR pepsi (1) 
den Client. Entsprechend ist 
.BR teletype (1) 
zuerst zu starten.
.PP
Wird der Terminalsimulator 
.BR teletype (1) 
auf einem anderen Host oder Port als dem Standard localhost:4200 gestartet können Host und Port dem Gerät 
übergeben werden, i.e 
.BR "-e 0" : localhost : 4200 .
Wir nur ein anderer Host verwendet kann die Angabe des Ports entfallen.
.PP
.I Papertape Reader, Gerät 1
.PP
Dem Gerät wird beim Freischalten eine Datei zugewiesen aus der  Einzelzeichen gelesen 
werden können. Am Dateiende geht das Grät in den nicht-bereit Zustand. Der Papertape 
Reader unterstützt die Befehle 
.BR SRI " und " DGA .
.PP
Die Datei muss beim Freischalten des Gerätes angegeben werden, i.e.
.B "-e "
.I meinedatei.tap
.PP
.I X/Y-Point Plotter (Scope), Gerät 2
.PP
Dieses Gerät simuliert ein Oszilloskop dessen X- und Y-Eingänge über zwei AD-Wandler angesteuert werden. 
Programmgesteuert kann - nach der Ansteuerung der korrekten Koordinaten - der Elektronenstrahl kurz verstärkt 
werden und so ein Punkt im (lang nachleuchtenden) Phosphor des Bildschirms erzeugt werden.
.PP
Mit 
.BR DGA " und " DPA
werden die X- bzw. die Y-Koordinate gesetzt. Mit
.B SSR
kann abgefragt werden ob der Strahl bereits positioniert ist, dann kann mit
.B SIP 
der Strahl kurzzeitig verstärkt werden um den Leuchtpunkt zu erzeugen.
.PP
.BR pepsi (1) 
kommuniziert mit dem X/Y-Point Plotter über einen TCP Verbindung, 
.BR scope (1)
implementiert den Server, entsprechend ist es zuerst zu starten.
.PP
Wird der X/Y-Point Plotter
.BR scope (1)
auf auf einem anderen Host oder Port als dem Standard localhost:4321 gestartet können Host und Port dem Gerät
übergeben werden, i.e
.BR "-e 0" : localhost : 4321 .
Wir nur ein anderer Host verwendet kann die Angabe des Ports entfallen.
.PP
.I GPIO 7-Segment Anzeige, Gerät 3
.PP
Auf Platformen mit General-Purpose I/O (aktuell wird die Raspberry Pi Familie unterstützt) kann über 
zwei GPIO Pins eine 7-Segement Anzeige mit TM1637 Controller-Chip angesteuert werden. Es werden zwei
aufeinander folgende Pins für 
.BR Clock " und " Data
benötigt. Die Nummer des ersten Pins (Clock) kann als Parameter übergeben werden, der 
Default ist Pin 12, entsprechend
.IR "-e 3:12" . 
Als zweiter Pin wird dann Pin 1 für Data benutzt.
.PP
Das Gerät unterstützt
.B RSD
zum Löschen der Anzeige, 
.B DUS 
zum Auswählen der Ziffer (wobei die zu verwendenden Werte vom Anzeigen-Modell abhängen, der Prototyp hat
die Ziffer mit Index "0" ganz links) und
.B DPA
zum Anzeigen eines Wertes. Dabei wird der Wert des Akkumulators als Dezimalziffer angezeigt.
.PP
.I GPIO Ein-/Ausgabe, Gerät 4
.PP
Auf Platformen mit General-Purpose I/O (aktuell wird die Raspberry Pi Familie unterstützt) können mit 
diesem Gerät bis zu 12 GPIO Pins zur Ein- oder Ausgabe verwendet werden. Dabei entspricht Bit 11 (LSB)
dem GPIO Pin 2 und Bit 0 (MSB) dem Pin 14.
.PP
Mit dem 
.B DSM 
Befehl wird selektiert welche Pins verwendet werden (ein gesetztes Bit selektiert einen Pin).
Der 
.B DUS 
Befehl bestimmt welche Pins als Ausgabe und welche als Eingabe verwendte werden. Ein gesetztes Bit 
selektiert den Pin zur Ausgabe.
.PP
Mit 
.B DPA 
werden die vorher für Ausgabe selektierten Pins auf die entsprechenden Bitwerte im Akkumulator gesetzt.
Die für Eingabe selektierten Pins werden mit
.B DGA
eingelesen und an die entsprecheden Positionen im Akkumulator geschrieben. Nicht für die Eingabe 
selektierte Pins haben keinen definierten Zustand.
.PP
.I Prozessor, Gerät 15
.PP
Über die Gerätenummer 15 wird der Prozessor gesteuert. Dies wird verwendet um die CPU programmgesteuert mit eine RSD Befehl (E/A Code 7) anzuhalten (i.e. am Programmende).
.PP Des weiteren können über die E/A Kodes 1 und 2 die Unterbrechungen Ein- bzw. Ausgeschaltet werden.
.TP
.BR HLT " (Halt the program, 7777, RSD 0017)"
Das Programm anhalten.
.TP
.BR ION " (Enable interrupte, 7637, SRO 0017)"
Unterbrechungen ermöglichen.
.TP
.BR IOF " (Disable interrupts, 7657, DGA 0017)"
Unterbrechungen blockieren.
.SH SIEHE AUCH
.BR pot (1),
.BR pot (5),
.BR pepsi (1),
.BR teletype (1),
.BR scope (1)
